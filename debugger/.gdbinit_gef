source ~/.gdbinit-gef.py
source ~/Pwngdb/angelheap/gdbinit.py

# gef config
gef config context.clear_screen 1
gef config context.ignore_registers "$cs $ss $ds $es $fs $gs"
gef config context.layout "regs code args source stack extra"

# misc
set history expansion on
set print asm-demangle on

# set solib-search-path base on binary's architecture
define sss
python
arch = gdb.execute("show arch", to_string = True)
if "aarch64" in arch:
    gdb.execute("set solib-search-path /usr/aarch64-linux-gnu/lib")
elif "arm" in arch:
    gdb.execute("set solib-search-path /usr/arm-linux-gnueabihf/lib")
end

show solib-search-path
end

# target remote localhost, arg0 = port
define trl
    target remote localhost:$arg0
end

# at
define at
if $argc <= 1
python
import subprocess as sp
import traceback
file = get_filepath()
try:
    cmd = "pidof \"{}\"".format(file)
    pid = int(sp.check_output(cmd, shell=True).decode('utf-8').split(" ")[0])
    print("Attaching to pid: {}".format(pid))
    gdb.execute("attach {}".format(pid))
except Exception:
    traceback.print_exc()
end
if $argc == 1
   source $arg0
end

else
    help at
end
end
document at
Attach to latest pid of this file. Can also run gdbscript if provided
Usage: at [gdbscript] (optional)
end

# off (offset)
python
class Off(gdb.Command):
    def __init__(self):
        super (Off, self).__init__ ("off", gdb.COMMAND_USER)

    def invoke(self,args,from_tty):
        self.dont_repeat()
        args = args.split(" ")
        if len(args) == 2:
            self.do_off(args)
        else:
            gdb.execute("help off")

    def do_off(self, args):
        arg1 = str(gdb.parse_and_eval(args[0]))
        arg2 = str(gdb.parse_and_eval(args[1]))
        try:
            x = int(arg1, 16)
            y = int(arg2, 16)
            print("{:#x} --> {:#x} : {:#x} byte(s)".format(x, y, y-x))
        except Exception as e:
            import traceback
            traceback.print_exc()
Off()
end
document off
Calculate distance between two variables
Example: off $rdi $rsi
Example: off 1 0xf
end

# base
python
class Base(GenericCommand):
    """Get base address of code, heap and libc."""
    _cmdline_ = "base"
    _syntax_  = "{:s}".format(_cmdline_)

    @only_if_gdb_running
    def do_invoke(self, argv):
        gdb.execute("set $code=$_base()")
        gdb.execute("set $heap=$_base(\"heap\")")
        # Use more strict rule to find libc's address
        proc_map = gef.memory.maps
        for section in proc_map:
            if "libc-" in section.path or "libc.so.6" in section.path:
                gdb.execute("set $libc={}".format(section.page_start))
                break 
        print("$code = {}".format(gdb.parse_and_eval("$code")))
        print("$heap = {}".format(gdb.parse_and_eval("$heap")))
        print("$libc = {}".format(gdb.parse_and_eval("$libc")))
        return

register_external_command(Base())
end
