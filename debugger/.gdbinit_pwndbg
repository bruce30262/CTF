source ~/pwndbg/gdbinit.py
source ~/Pwngdb/angelheap/gdbinit.py

# alias for angelheap
alias fbin=printfastbin
alias hip=heapinfo
alias tm=tracemalloc
alias pp=parseheap

# misc setting for pwndbg
alias offset=distance
alias vh=vis_heap_chunks
alias plk=probeleak
alias bv=breakrva
alias sr=stepret
alias sc=source
set print asm-demangle on
set show-flags on
set show-retaddr-reg on
set context-clear-screen on
set telescope-skip-repeating-val off

# customize color-theme
set banner-color cyan,bold
set context-register-changed-color red,bold
set context-register-color green
set disasm-branch-color yellow
set memory-data-color blue
set memory-heap-color purple,bold
set memory-rodata-color green
set memory-stack-color purple
set solib-search-path /usr/arm-linux-gnueabihf/lib:/usr/aarch64-linux-gnu/lib

# set solib-search-path base on binary's architecture
define sss
python
arch = gdb.execute("show arch", to_string = True)
if "aarch64" in arch:
    gdb.execute("set solib-search-path /usr/aarch64-linux-gnu/lib")
elif "arm" in arch:
    gdb.execute("set solib-search-path /usr/arm-linux-gnueabihf/lib")
end

show solib-search-path
end

# target remote localhost, arg0 = port
define trl
    target remote localhost:$arg0
end

# at
define at
if $argc <= 1
python
import subprocess as sp
import traceback
file = pwndbg.gdblib.file.get_file(pwndbg.gdblib.proc.exe)
try:
    gdb.execute("attachp {}".format(file))
except Exception:
    traceback.print_exc()
end
if $argc == 1
   source $arg0
end

else
    help at
end
end
document at
Attach to latest pid of this file. Can also run gdbscript if provided
Usage: at [gdbscript] (optional)
end

# find
python
class Find(gdb.Command):
    def __init__(self):
        super (Find, self).__init__ ("find", gdb.COMMAND_USER)

    def invoke(self,args,from_tty):
        self.dont_repeat()
        self.do_find(args)

    def do_find(self, value):
        import string
        import codecs
        cmd = None
        if value.startswith("0x"):
            value = value[2:]
            if len(value) %2 != 0:
                value = "0" + value
            value = codecs.decode(value, 'hex')[::-1]
            value = codecs.encode(value, 'hex').decode('UTF-8')
            cmd = "search -x %s" % value
        else:
            cmd = "search -s %s" % value
        print(cmd)
        gdb.execute(cmd)
Find()
end

# get base address
define base
python
import pwndbg
import traceback
file = pwndbg.gdblib.file.get_file(pwndbg.gdblib.proc.exe)
maps = None
try:
    maps = pwndbg.gdblib.vmmap.get()
except Exception as e:
    traceback.print_exc()
    print(pwndbg.color.red("Error while getting program's memory maps"))
    print(pwndbg.color.red("Make sure you start the program first"))
else:
    cmd = "set $code = %s" % hex(pwndbg.gdblib.elf.exe().address)
    gdb.execute(cmd)
    print(cmd)
    for page in maps:
        cmd = ""
        if page.offset == 0: # is base
            if "libc-" in page.objfile or "libc.so.6" in page.objfile: # libc
                cmd = "set $libc = %s" % hex(page.vaddr)
            elif "[heap]" in page.objfile: # heap
                cmd = "set $heap = %s" % hex(page.vaddr)
        if len(cmd):
            gdb.execute(cmd)
            print(cmd)
end

end

# get tls section address
define gettls
python
import pwndbg

arch = pwndbg.gdblib.arch.current
support_arch = ["x86-64", "i386"]
if arch in support_arch:
    tls_addr = pwndbg.gdblib.tls.address
    cmd = "set $tls = %s" % hex(tls_addr)
    gdb.execute(cmd)
    print(cmd)
else:
    print(pwndbg.color.red("Currently this command only support x86_64 & i386 architecture, your architecture: %s" % arch))
end

end

# get canary value
define getcanary
python
import pwndbg
arch = pwndbg.gdblib.arch.current
support_arch = ["x86-64", "i386"]
if arch in support_arch:
    canary = pwndbg.commands.canary.canary_value()[0]
    gdb.execute("set $canary=%s" % hex(canary))
    print("set $canary = %s" % hex(canary))
else:    
    print(pwndbg.color.red("Currently this command only support x86_64 & i386 architecture, your architecture: %s" % arch))
end

end

# get tls info (tls addr + canary + stack addr)
define tlsi
gettls
getcanary
python
import pwndbg
import struct
bits = None
arch = pwndbg.gdblib.arch.current

if arch == "x86-64":
    bits = 64
else:
    bits = 32

tls_check = gdb.execute("p $tls", to_string=True)
if "void" in tls_check:
    print(pwndbg.color.red("Failed to get the tls address"))
else:
    tls_addr = int(tls_check.split("=")[1])
    canary = int(gdb.execute("p $canary", to_string=True).split("=")[1])
    tls_off, tls_stack = None, None
    maps = pwndbg.gdblib.vmmap.get()
    # get stack range
    stack_start, stack_end = None, None
    for page in maps:
        if page.objfile == "[stack]": # is base
            stack_start, stack_end = page.vaddr, page.vaddr + +page.memsz
            break
    # find stack address
    found_stack = False
    inf = gdb.inferiors()[0]
    for addr in range(tls_addr, tls_addr + 0x1000, bits//8):
        content = inf.read_memory(addr, bits//8)
        content = struct.unpack('<Q', content.tobytes().ljust(8, b'\x00'))[0]
        if (content >= stack_start) and (content <= stack_end):
            tls_off, tls_stack = addr, content
            found_stack = True
            break
    
    # show all the info of the .tls section 
    print("----------------------------------")
    print("tls address: %s" % hex(tls_addr))
    print("stack canary: %s" % hex(canary))
    if found_stack:
        print("Found a stack address %s at %s" %( hex(tls_stack), hex(tls_off) ) )
end

end
